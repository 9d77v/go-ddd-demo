//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package impl

import (
	contextx "context"
	"github.com/9d77v/go-ddd-demo/api/proto/user/pb"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &userServiceImpl_{}
		},
	})
	userServiceImplStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &UserServiceImpl{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(userServiceImplStructDescriptor)
}

type userServiceImpl_ struct {
	UserInfo_ func(ctx contextx.Context, in *pb.UserInfoRequest) (*pb.UserInfoResponse, error)
	UserPage_ func(ctx contextx.Context, in *pb.UserPageRequest) (*pb.UserPageResponse, error)
}

func (u *userServiceImpl_) UserInfo(ctx contextx.Context, in *pb.UserInfoRequest) (*pb.UserInfoResponse, error) {
	return u.UserInfo_(ctx, in)
}

func (u *userServiceImpl_) UserPage(ctx contextx.Context, in *pb.UserPageRequest) (*pb.UserPageResponse, error) {
	return u.UserPage_(ctx, in)
}

type UserServiceImplIOCInterface interface {
	UserInfo(ctx contextx.Context, in *pb.UserInfoRequest) (*pb.UserInfoResponse, error)
	UserPage(ctx contextx.Context, in *pb.UserPageRequest) (*pb.UserPageResponse, error)
}

var _userServiceImplSDID string

func GetUserServiceImplSingleton() (*UserServiceImpl, error) {
	if _userServiceImplSDID == "" {
		_userServiceImplSDID = util.GetSDIDByStructPtr(new(UserServiceImpl))
	}
	i, err := singleton.GetImpl(_userServiceImplSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*UserServiceImpl)
	return impl, nil
}

func GetUserServiceImplIOCInterfaceSingleton() (UserServiceImplIOCInterface, error) {
	if _userServiceImplSDID == "" {
		_userServiceImplSDID = util.GetSDIDByStructPtr(new(UserServiceImpl))
	}
	i, err := singleton.GetImplWithProxy(_userServiceImplSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(UserServiceImplIOCInterface)
	return impl, nil
}
