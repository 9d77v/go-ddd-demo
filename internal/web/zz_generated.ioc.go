//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package web

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"net/http"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &app_{}
		},
	})
	appStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &App{}
		},
		ParamFactory: func() interface{} {
			var _ paramInterface = &Param{}
			return &Param{}
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(paramInterface)
			impl := i.(*App)
			return param.Init(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(appStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &standaloneApp_{}
		},
	})
	standaloneAppStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &StandaloneApp{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(standaloneAppStructDescriptor)
}

type paramInterface interface {
	Init(impl *App) (*App, error)
}
type app_ struct {
	Run_          func()
	getServerMux_ func() *http.ServeMux
}

func (a *app_) Run() {
	a.Run_()
}

func (a *app_) getServerMux() *http.ServeMux {
	return a.getServerMux_()
}

type standaloneApp_ struct {
	Run_          func()
	getServerMux_ func() *http.ServeMux
}

func (s *standaloneApp_) Run() {
	s.Run_()
}

func (s *standaloneApp_) getServerMux() *http.ServeMux {
	return s.getServerMux_()
}

type AppIOCInterface interface {
	Run()
	getServerMux() *http.ServeMux
}

type StandaloneAppIOCInterface interface {
	Run()
	getServerMux() *http.ServeMux
}

var _appSDID string

func GetAppSingleton(p *Param) (*App, error) {
	if _appSDID == "" {
		_appSDID = util.GetSDIDByStructPtr(new(App))
	}
	i, err := singleton.GetImpl(_appSDID, p)
	if err != nil {
		return nil, err
	}
	impl := i.(*App)
	return impl, nil
}

func GetAppIOCInterfaceSingleton(p *Param) (AppIOCInterface, error) {
	if _appSDID == "" {
		_appSDID = util.GetSDIDByStructPtr(new(App))
	}
	i, err := singleton.GetImplWithProxy(_appSDID, p)
	if err != nil {
		return nil, err
	}
	impl := i.(AppIOCInterface)
	return impl, nil
}

var _standaloneAppSDID string

func GetStandaloneAppSingleton() (*StandaloneApp, error) {
	if _standaloneAppSDID == "" {
		_standaloneAppSDID = util.GetSDIDByStructPtr(new(StandaloneApp))
	}
	i, err := singleton.GetImpl(_standaloneAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*StandaloneApp)
	return impl, nil
}

func GetStandaloneAppIOCInterfaceSingleton() (StandaloneAppIOCInterface, error) {
	if _standaloneAppSDID == "" {
		_standaloneAppSDID = util.GetSDIDByStructPtr(new(StandaloneApp))
	}
	i, err := singleton.GetImplWithProxy(_standaloneAppSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(StandaloneAppIOCInterface)
	return impl, nil
}
